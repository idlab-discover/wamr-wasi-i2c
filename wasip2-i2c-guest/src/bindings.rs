// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
pub type I2c = wasi::i2c::i2c::I2c;
#[allow(unused_unsafe, clippy::all)]
pub fn get_i2c_bus() -> I2c {
    unsafe {
        #[cfg(target_arch = "wasm32")]
        #[link(wasm_import_module = "$root")]
        unsafe extern "C" {
            #[link_name = "get-i2c-bus"]
            fn wit_import0() -> i32;
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn wit_import0() -> i32 {
            unreachable!()
        }
        let ret = unsafe { wit_import0() };
        unsafe { wasi::i2c::i2c::I2c::from_handle(ret as u32) }
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_setup_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::setup();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_run_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::run();
}
pub trait Guest {
    fn setup() -> ();
    fn run() -> ();
}
#[doc(hidden)]
macro_rules! __export_world_pingpong_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "setup")] unsafe extern "C" fn
        export_setup() { unsafe { $($path_to_types)*:: _export_setup_cabi::<$ty > () } }
        #[unsafe (export_name = "run")] unsafe extern "C" fn export_run() { unsafe {
        $($path_to_types)*:: _export_run_cabi::<$ty > () } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_pingpong_cabi;
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod i2c {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod i2c {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Address = u16;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum NoAcknowledgeSource {
                Address,
                Data,
                Unknown,
            }
            impl ::core::fmt::Debug for NoAcknowledgeSource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        NoAcknowledgeSource::Address => {
                            f.debug_tuple("NoAcknowledgeSource::Address").finish()
                        }
                        NoAcknowledgeSource::Data => {
                            f.debug_tuple("NoAcknowledgeSource::Data").finish()
                        }
                        NoAcknowledgeSource::Unknown => {
                            f.debug_tuple("NoAcknowledgeSource::Unknown").finish()
                        }
                    }
                }
            }
            impl NoAcknowledgeSource {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> NoAcknowledgeSource {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => NoAcknowledgeSource::Address,
                        1 => NoAcknowledgeSource::Data,
                        2 => NoAcknowledgeSource::Unknown,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum ErrorCode {
                Bus,
                ArbitrationLoss,
                NoAcknowledge(NoAcknowledgeSource),
                Overrun,
                Other,
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::Bus => f.debug_tuple("ErrorCode::Bus").finish(),
                        ErrorCode::ArbitrationLoss => {
                            f.debug_tuple("ErrorCode::ArbitrationLoss").finish()
                        }
                        ErrorCode::NoAcknowledge(e) => {
                            f.debug_tuple("ErrorCode::NoAcknowledge").field(e).finish()
                        }
                        ErrorCode::Overrun => {
                            f.debug_tuple("ErrorCode::Overrun").finish()
                        }
                        ErrorCode::Other => f.debug_tuple("ErrorCode::Other").finish(),
                    }
                }
            }
            impl ::core::fmt::Display for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for ErrorCode {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct I2c {
                handle: _rt::Resource<I2c>,
            }
            impl I2c {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for I2c {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:i2c/i2c")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]i2c"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl I2c {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read(
                    &self,
                    address: Address,
                    len: u64,
                ) -> Result<_rt::Vec<u8>, ErrorCode> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:i2c/i2c")]
                        unsafe extern "C" {
                            #[link_name = "[method]i2c.read"]
                            fn wit_import1(_: i32, _: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                _rt::as_i32(address),
                                _rt::as_i64(&len),
                                ptr0,
                            )
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result9 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l6 {
                                        0 => ErrorCode::Bus,
                                        1 => ErrorCode::ArbitrationLoss,
                                        2 => {
                                            let e8 = {
                                                let l7 = i32::from(
                                                    *ptr0
                                                        .add(1 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                NoAcknowledgeSource::_lift(l7 as u8)
                                            };
                                            ErrorCode::NoAcknowledge(e8)
                                        }
                                        3 => ErrorCode::Overrun,
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            ErrorCode::Other
                                        }
                                    };
                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl I2c {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write(
                    &self,
                    address: Address,
                    data: &[u8],
                ) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 3]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3],
                        );
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:i2c/i2c")]
                        unsafe extern "C" {
                            #[link_name = "[method]i2c.write"]
                            fn wit_import2(
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                _rt::as_i32(address),
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(1).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => ErrorCode::Bus,
                                        1 => ErrorCode::ArbitrationLoss,
                                        2 => {
                                            let e6 = {
                                                let l5 = i32::from(*ptr1.add(2).cast::<u8>());
                                                NoAcknowledgeSource::_lift(l5 as u8)
                                            };
                                            ErrorCode::NoAcknowledge(e6)
                                        }
                                        3 => ErrorCode::Overrun,
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            ErrorCode::Other
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::vec::Vec;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_pingpong_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_pingpong_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_pingpong_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:my:pingpong:pingpong:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 507] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfc\x02\x01A\x02\x01\
A\x0a\x01B\x0f\x01{\x04\0\x07address\x03\0\0\x01m\x03\x07address\x04data\x07unkn\
own\x04\0\x15no-acknowledge-source\x03\0\x02\x01q\x05\x03bus\0\0\x10arbitration-\
loss\0\0\x0eno-acknowledge\x01\x03\0\x07overrun\0\0\x05other\0\0\x04\0\x0aerror-\
code\x03\0\x04\x04\0\x03i2c\x03\x01\x01h\x06\x01p}\x01j\x01\x08\x01\x05\x01@\x03\
\x04self\x07\x07address\x01\x03lenw\0\x09\x04\0\x10[method]i2c.read\x01\x0a\x01j\
\0\x01\x05\x01@\x03\x04self\x07\x07address\x01\x04data\x08\0\x0b\x04\0\x11[metho\
d]i2c.write\x01\x0c\x03\0\x0cwasi:i2c/i2c\x05\0\x02\x03\0\0\x03i2c\x03\0\x03i2c\x03\
\0\x01\x01i\x02\x01@\0\0\x03\x03\0\x0bget-i2c-bus\x01\x04\x01@\0\x01\0\x04\0\x05\
setup\x01\x05\x04\0\x03run\x01\x05\x04\0\x14my:pingpong/pingpong\x04\0\x0b\x0e\x01\
\0\x08pingpong\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
